/**
 * Camera Barcode Scanner Script for iPhone/Mobile Devices
 * Uses QuaggaJS for barcode detection from camera feed
 */

class CameraScanner {
    constructor(targetElement, onBarcodeDetected) {
        this.targetElement = targetElement;
        this.onBarcodeDetected = onBarcodeDetected;
        this.scanner = null;
        this.isActive = false;
    }

    async init() {
        try {
            await this.checkCameraPermission();
            this.createScannerUI();
        } catch (error) {
            console.error('Error initializing scanner:', error);
            this.showError('Camera access denied or not available.');
        }
    }

    async checkCameraPermission() {
        // Check if camera is supported
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            throw new Error('Camera API is not supported in this browser');
        }

        // Request camera permission
        try {
            await navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } });
            return true;
        } catch (error) {
            console.error('Camera permission error:', error);
            throw new Error('Camera permission denied');
        }
    }

    createScannerUI() {
        // Create scanner container
        const scannerContainer = document.createElement('div');
        scannerContainer.className = 'scanner-container';
        scannerContainer.innerHTML = `
            <div class="scanner-overlay">
                <div class="scanner-target"></div>
                <div class="scanner-instructions">Align barcode within the target area</div>
                <button class="scanner-close-btn">&times;</button>
            </div>
            <div id="scanner-viewfinder"></div>
        `;

        // Add styles to the container
        Object.assign(scannerContainer.style, {
            position: 'fixed',
            top: '0',
            left: '0',
            width: '100%',
            height: '100%',
            zIndex: '9999',
            backgroundColor: '#000',
            display: 'none'
        });

        // Add styles for the overlay
        const overlay = scannerContainer.querySelector('.scanner-overlay');
        Object.assign(overlay.style, {
            position: 'absolute',
            top: '0',
            left: '0',
            width: '100%',
            height: '100%',
            zIndex: '10000',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center'
        });

        // Add styles for the target area
        const target = scannerContainer.querySelector('.scanner-target');
        Object.assign(target.style, {
            width: '70%',
            height: '180px',
            border: '2px solid #0047BB',
            borderRadius: '10px',
            boxShadow: '0 0 0 2000px rgba(0, 0, 0, 0.7)',
            position: 'relative',
            marginBottom: '40px'
        });

        // Add styles for the close button
        const closeBtn = scannerContainer.querySelector('.scanner-close-btn');
        Object.assign(closeBtn.style, {
            position: 'absolute',
            top: '20px',
            right: '20px',
            backgroundColor: 'rgba(255, 255, 255, 0.8)',
            border: 'none',
            borderRadius: '50%',
            width: '40px',
            height: '40px',
            fontSize: '24px',
            cursor: 'pointer'
        });

        // Add styles for instructions
        const instructions = scannerContainer.querySelector('.scanner-instructions');
        Object.assign(instructions.style, {
            color: 'white',
            fontSize: '16px',
            marginTop: '20px',
            textAlign: 'center',
            padding: '0 20px'
        });

        // Add event listener to close button
        closeBtn.addEventListener('click', () => this.stop());

        // Add the container to the DOM
        document.body.appendChild(scannerContainer);
        this.scannerContainer = scannerContainer;
    }

    start() {
        if (this.isActive) return;
        
        this.scannerContainer.style.display = 'block';
        this.isActive = true;

        // Initialize Quagga
        Quagga.init({
            inputStream: {
                name: "Live",
                type: "LiveStream",
                target: document.getElementById('scanner-viewfinder'),
                constraints: {
                    facingMode: "environment", // Use rear camera
                    aspectRatio: { min: 1, max: 2 }
                }
            },
            locator: {
                patchSize: "medium",
                halfSample: true
            },
            numOfWorkers: 2,
            decoder: {
                readers: [
                    "code_128_reader",
                    "ean_reader",
                    "ean_8_reader",
                    "code_39_reader",
                    "code_39_vin_reader",
                    "codabar_reader",
                    "upc_reader",
                    "upc_e_reader",
                    "i2of5_reader"
                ]
            },
            locate: true
        }, (err) => {
            if (err) {
                console.error('Quagga initialization error:', err);
                this.showError('Could not initialize barcode scanner.');
                return;
            }
            
            // Start once initialized
            Quagga.start();
            
            // Add event listener for detected barcodes
            Quagga.onDetected(this.onBarcodeDetect.bind(this));
        });
    }

    stop() {
        if (!this.isActive) return;
        
        Quagga.stop();
        this.scannerContainer.style.display = 'none';
        this.isActive = false;
    }

    onBarcodeDetect(result) {
        // Check if the result is valid
        if (result && result.codeResult && result.codeResult.code) {
            const barcode = result.codeResult.code;
            
            // Play success sound
            this.playBeepSound();
            
            // Highlight the barcode location
            this.highlightDetectedBarcode(result);
            
            // Stop scanner after successful detection
            this.stop();
            
            // Call the callback with the detected barcode
            if (typeof this.onBarcodeDetected === 'function') {
                this.onBarcodeDetected(barcode);
            }
        }
    }

    highlightDetectedBarcode(result) {
        // If we have the position data
        if (result.boxes) {
            // Create a canvas overlay
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // Set canvas dimensions to match the video
            const scannerViewfinder = document.getElementById('scanner-viewfinder');
            const video = scannerViewfinder.querySelector('video');
            
            if (video) {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                
                // Draw green rectangle around the barcode
                ctx.strokeStyle = '#00FF00';
                ctx.lineWidth = 5;
                
                result.boxes.forEach(box => {
                    ctx.beginPath();
                    ctx.moveTo(box[0][0], box[0][1]);
                    box.forEach((point, i) => {
                        if (i > 0) ctx.lineTo(point[0], point[1]);
                    });
                    ctx.closePath();
                    ctx.stroke();
                });
                
                // Add the canvas to the viewfinder
                canvas.style.position = 'absolute';
                canvas.style.top = '0';
                canvas.style.left = '0';
                canvas.style.width = '100%';
                canvas.style.height = '100%';
                canvas.style.pointerEvents = 'none';
                scannerViewfinder.appendChild(canvas);
                
                // Remove after a moment
                setTimeout(() => {
                    if (canvas.parentNode) {
                        canvas.parentNode.removeChild(canvas);
                    }
                }, 1000);
            }
        }
    }

    showError(message) {
        // Create error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'scanner-error';
        errorDiv.textContent = message;
        
        // Style the error message
        Object.assign(errorDiv.style, {
            position: 'fixed',
            top: '10%',
            left: '50%',
            transform: 'translateX(-50%)',
            backgroundColor: 'rgba(220, 53, 69, 0.9)',
            color: 'white',
            padding: '15px 20px',
            borderRadius: '5px',
            zIndex: '10001',
            maxWidth: '80%',
            textAlign: 'center'
        });
        
        // Add to DOM
        document.body.appendChild(errorDiv);
        
        // Remove after a few seconds
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 3000);
        
        // Stop the scanner
        this.stop();
    }

    playBeepSound() {
        try {
            const audio = new Audio('data:audio/mp3;base64,SUQzAwAAAAAAJlRQRTEAAAAcAAAAU291bmRKYXkuY29tIFNvdW5kIEVmZmVjdHMA//uSwAAAAAABLBQAAAMBUVTEFDQABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7ksH/g8AAAaQcAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV');
            audio.volume = 0.5;
            audio.play().catch(e => console.log('Audio play failed:', e));
        } catch (e) {
            console.warn('Unable to play beep sound:', e);
        }
    }
}

// Usage:
// 1. Add QuaggaJS to your HTML: <script src="https://cdn.jsdelivr.net/npm/quagga@0.12.1/dist/quagga.min.js"></script>
// 2. Create an instance: const scanner = new CameraScanner(document.getElementById('your-element'), (barcode) => { console.log(barcode); });
// 3. Initialize: scanner.init();
// 4. Start scanning when needed: scanner.start();
